name: Build pwease uwu

env:
  CARGO_TERM_COLOR: always

on: 
  workflow_dispatch

jobs:
  prepare_release:
    runs-on: windows-2019
    outputs:
      release_ref: ${{ steps.gen_tag.outputs.release_ref }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: "alvr-org/ALVR"
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Generate tag, set release ref
        id: gen_tag
        env:
          RUST_BACKTRACE: 1
        run: |
          $out = cargo xtask bump --nightly
          echo $out
          echo "::set-output name=version_tag::$(echo $out | sls -CaseSensitive -Pattern '^v.*$')"
          echo "::set-output name=release_ref::$(git rev-parse HEAD)"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Release tag is taken from the gen_tag job.
          tag_name: ${{ steps.gen_tag.outputs.version_tag }}
          release_name: ALVR ${{ steps.gen_tag.outputs.version_tag }}
          # TODO: gather commit messages to post here in the body
          body: |
            AAAAAAAAAAAAAAAAAAAAAAAA
          draft: true
          prerelease: false

  build_linux_server:
    runs-on: ubuntu-latest
    needs: [prepare_release]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: "alvr-org/ALVR"
          sha: "871c6d348ade7c95613422c9e1d9b99a390901c6"
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build and install dependencies
        env:
          RUST_BACKTRACE: 1
        run: |
          sudo apt-get update
          sudo apt-get install build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev cmake libasound2-dev libjack-jackd2-dev libgtk-3-dev libunwind-dev libffmpeg-nvenc-dev nvidia-cuda-toolkit
          cp packaging/deb/cuda.pc /usr/share/pkgconfig
          cargo xtask prepare-deps --platform linux
      - name: Build and package ALVR
        env:
          RUST_BACKTRACE: 1
        run: |
          cargo xtask bump --nightly
          cargo xtask package-server --gpl
      - name: Upload portable server
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/alvr_server_linux.tar.gz
          asset_name: alvr_server_linux.tar.gz
          asset_content_type: application/gzip

  publish_release:
    runs-on: ubuntu-latest
    needs:
      - prepare_release
      - build_linux_server
    steps:
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.prepare_release.outputs.release_id }}
